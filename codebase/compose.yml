# version: "3.8"
# name: zaheercomposefile

services:
  # Microservices
  user-service:
    container_name: "user"
    hostname: "user"
    build:
      context: ./UserServices
      dockerfile: Dockerfile.dev
    volumes:
      - ./UserServices:/code
    depends_on:
      - postgres-user
      - broker
    image: zaheer771/user-service:latest
    ports:
      - "8007:8007"
    networks:
      - backend

  product-service:
    container_name: "product"
    hostname: "product"
    build:
      context: ./ProductServices
      dockerfile: Dockerfile.dev
    volumes:
      - ./ProductServices:/code
    depends_on:
      - postgres-product
      - broker
    ports:
      - "8002:8002"
    image: zaheer771/product-service:latest

    networks:
      - backend

  order-service:
    container_name: "order"
    hostname: "order"
    build:
      context: ./OrderServices
      dockerfile: Dockerfile.dev
    volumes:
      - ./OrderServices:/code
    depends_on:
      - postgres-order
      - broker
    ports:
      - "8003:8003"
    image: zaheer771/order-service:latest
    networks:
      - backend

  notification-service:
    container_name: "notification"
    hostname: "notification"
    build:
      context: ./NotificationServices
      dockerfile: Dockerfile.dev
    volumes:
      - ./NotificationServices:/code
    depends_on:
      - postgres-notification
      - broker
    image: zaheer771/notification-service:latest
    ports:
      - "8004:8004"
    networks:
      - backend

  inventory-service:
    container_name: "inventory"
    hostname: "inventory"
    build:
      context: ./InventoryServices
      dockerfile: Dockerfile.dev
    volumes:
      - ./InventoryServices:/code
    image: zaheer771/inventory-service:latest
    depends_on:
      - postgres-inventory
      - broker
    ports:
      - "8005:8005"
    networks:
      - backend

  payment-service:
    container_name: "payment"
    hostname: "payment"
    build:
      context: ./PaymentServices
      dockerfile: Dockerfile.dev
    volumes:
      - ./PaymentServices:/code
    depends_on:
      - postgres-payment
      - broker
    ports:
      - "8006:8006"
    networks:
      - backend
    image: zaheer771/payment-service:latest

  # Dapr sidecars
  user-service-dapr:
    image: daprio/daprd:latest
    command: ["./daprd", "-app-id", "user-service", "-app-port", "8000"]
    network_mode: "service:user-service"
    depends_on:
      - user-service

  product-service-dapr:
    image: daprio/daprd:latest
    command: ["./daprd", "-app-id", "product-service", "-app-port", "8000"]
    network_mode: "service:product-service"
    depends_on:
      - product-service

  order-service-dapr:
    image: daprio/daprd:latest
    command: ["./daprd", "-app-id", "order-service", "-app-port", "8000"]
    network_mode: "service:order-service"
    depends_on:
      - order-service

  notification-service-dapr:
    image: daprio/daprd:latest
    command: ["./daprd", "-app-id", "notification-service", "-app-port", "8000"]
    network_mode: "service:notification-service"
    depends_on:
      - notification-service

  inventory-service-dapr:
    image: daprio/daprd:latest
    command: ["./daprd", "-app-id", "inventory-service", "-app-port", "8000"]
    network_mode: "service:inventory-service"
    depends_on:
      - inventory-service

  payment-service-dapr:
    image: daprio/daprd:latest
    command: ["./daprd", "-app-id", "payment-service", "-app-port", "8000"]
    network_mode: "service:payment-service"
    depends_on:
      - payment-service

  # pgadmin
  #   image: dpage/pgadmin4:8.6
  #   restart: always
  #   container_name: PgAdmin4Cont4
  #   ports:
  #     - "8880:80"
  #   environment:
  #     - PGADMIN_DEFAULT_EMAIL=user@domain.com
  #     - PGADMIN_DEFAULT_PASSWORD=SuperSecret
  #   volumes:
  #     - pgadmin:/var/lib/pgadmin

  # Databases
  postgres-user:
    image: postgres:latest
    container_name: postgres-user
    environment:
      POSTGRES_DB: userdb
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5433:5432"
    volumes:
      - postgres-user:/var/lib/postgresql/data
    networks:
      - backend

  postgres-product:
    image: postgres:latest
    container_name: postgres-product
    environment:
      POSTGRES_DB: productdb
      POSTGRES_USER: ${POSTGRES_USER:-user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5434:5432"
    volumes:
      - postgres-product:/var/lib/postgresql/data
    networks:
      - backend

  postgres-order:
    image: postgres:latest
    container_name: postgres-order
    environment:
      POSTGRES_DB: orderdb
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5435:5432"
    volumes:
      - postgres-order:/var/lib/postgresql/data
    networks:
      - backend

  postgres-inventory:
    image: postgres:latest
    container_name: postgres-inventory
    environment:
      POSTGRES_DB: inventorydb
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5436:5432"
    volumes:
      - postgres-inventory:/var/lib/postgresql/data
    networks:
      - backend

  postgres-payment:
    image: postgres:latest
    container_name: postgres-payment
    environment:
      POSTGRES_DB: paymentdb
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5437:5432"
    volumes:
      - postgres-payment:/var/lib/postgresql/data
    networks:
      - backend

  postgres-notification:
    image: postgres:latest
    container_name: postgres-notification
    environment:
      POSTGRES_DB: notificationdb
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5438:5432"
    volumes:
      - postgres-notification:/var/lib/postgresql/data
    networks:
      - backend

  # Message Broker
  broker:
    image: apache/kafka:3.7.0
    hostname: broker
    container_name: broker
    ports:
      - "9092:9092"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT_HOST://localhost:9092,PLAINTEXT://broker:19092"
      KAFKA_PROCESS_ROLES: "broker,controller"
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@broker:29093"
      KAFKA_LISTENERS: "CONTROLLER://:29093,PLAINTEXT_HOST://:9092,PLAINTEXT://:19092"
      KAFKA_INTER_BROKER_LISTENER_NAME: "PLAINTEXT"
      KAFKA_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      CLUSTER_ID: "4L6g3nShT-eMCtK--X86sw"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_LOG_DIRS: "/tmp/kraft-combined-logs"
    networks:
      - backend

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: "Local Kafka Cluster"
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: "broker:19092"
      DYNAMIC_CONFIG_ENABLED: "true"
    depends_on:
      - broker
    networks:
      - backend

  # Schema Registry
  schema-registry:
    image: confluentinc/cp-schema-registry:6.1.1
    container_name: schema-registry
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: "broker:19092"
      SCHEMA_REGISTRY_HOST_NAME: "schema-registry"
      SCHEMA_REGISTRY_LISTENERS: "http://0.0.0.0:8081"
    depends_on:
      - broker
    networks:
      - backend

  # Kong API Gateway
  # kong:
  #   image: kong:latest
  #   container_name: kong
  #   environment:
  #     KONG_DATABASE: "off"
  #     KONG_PROXY_ACCESS_LOG: /dev/stdout
  #     KONG_ADMIN_ACCESS_LOG: /dev/stdout
  #     KONG_PROXY_ERROR_LOG: /dev/stderr
  #     KONG_ADMIN_ERROR_LOG: /dev/stderr
  #     KONG_ADMIN_LISTEN: 0.0.0.0:8001
  #   ports:
  #     - "8008:8000"
  #     - "8009:8001"
  #   networks:
  #     - backend

volumes:
  postgres-user:
    driver: local
  postgres-product:
    driver: local
  postgres-order:
    driver: local
  postgres-inventory:
    driver: local
  postgres-payment:
    driver: local
  postgres-notification:
    driver: local

networks:
  backend:
    driver: bridge
  martapi-net:
    name: martapi-net
    external: true
